/**
 * ************************************************************************************************************************
 * @author 山东标梵信息技术有限公司
 * @company 山东标梵信息技术有限公司
 * @website https://www.biaofun.com/
 * @version 1.0.0
 * @datetime 2019/10/21 
 * @description 公共工具集。
 * ************************************************************************************************************************
 */
	export default {
    /**
     * ====================================================================================================
     * @description 通用正则表达式。
     * ====================================================================================================
     */
    regEx: {
    	regMail_QQ_163: /^[\w._]+@([qQ][qQ]|163)\.[cC][oO][mM](\r\n|\r|\n)?$/,    // 验证邮箱格式的正则表达式（QQ邮箱或163邮箱）
    	regTel: /^(\(\d{3,4}\)|\d{3,4}-|\s)?\d{7,14}$/,    // 验证固定电话的正则表达式
    	regPhone: /^1(3|4|5|7|8)\d{9}$/,    // 验证手机号码的正则表达式
    	regTaxpayersNo: /^[A-Za-z0-9]+$/,    // 验证纳税人识别号的正则表达式
    	regBankNo: /^\d{12,21}$/,    // 验证银行卡号的正则表达式
    },
    
    
    /**
     * ====================================================================================================
     * @description 判断数据是否是数组类型。
     * @param {any} val 要判断的数据。
     * @returns {boolean} true：是；false：不是。
     * ====================================================================================================
     */
    $isArray(val) {
    	return Object.prototype.toString.call(val) === '[object Array]';
    },
    
    
    /**
     * ====================================================================================================
     * @description 判断数据是否是字符串。
     * @param {any} val 要判断的数据。
     * @returns {boolean} true：是；false：不是。
     * ====================================================================================================
     */
    isString(val) {
    	return Object.prototype.toString.call(val) === '[object String]';
    },
    
    
    /**
     * ====================================================================================================
     * @description 判断数据是否是Object。精确判断。
     * @param {any} val 要判断的数据。
     * @returns {boolean} true：是；false：不是。
     * ====================================================================================================
     */
    isObject(val) {
    	return Object.prototype.toString.call(val) === '[object Object]' && val !== null && val !== undefined;
    },
    
    
    /**
     * ====================================================================================================
     * @description 判断数据是否是Date。精确判断。
     * @param {any} val 要判断的数据。
     * @returns {boolean} true：是；false：不是。
     * ====================================================================================================
     */
    isDate(val) {
    	return Object.prototype.toString.call(val) === '[object Date]';
    },
    
    
    /**
     * ====================================================================================================
     * @description 判断数据是否是Function。精确判断。
     * @param {any} val 要判断的数据。
     * @returns {boolean} true：是；false：不是。
     * ====================================================================================================
     */
    isFunction(val) {
    	return Object.prototype.toString.call(val) === '[object Function]';
    },
    
    
    /**
     * ====================================================================================================
     * @description 判断数据是否是Number 。精确判断。
     * @param {any} val 要判断的数据。
     * @returns {boolean} true：是；false：不是。
     * ====================================================================================================
     */
    isNumber(val) {
    	return Object.prototype.toString.call(val) === '[object Number]';
    },
    
    
    /**
     * ====================================================================================================
     * @description 判断数据是否是Boolean 。精确判断。
     * @param {any} val 要判断的数据。
     * @returns {boolean} true：是；false：不是。
     * ====================================================================================================
     */
    isBoolean(val) {
    	return Object.prototype.toString.call(val) === '[object Boolean]';
    },
    
    
    /**
     * ====================================================================================================
     * @description 合并baseURL和相对URL成一个完整的URL。
     * @param {string} baseURL baseURL。
     * @param {string} relativeURL 相对URL。
     * @returns {string} 返回组合后的完整URL。
     * ====================================================================================================
     */
    combineURLs(baseURL, relativeURL) {
    	return relativeURL && this.isString(relativeURL) && this.isString(baseURL) ? baseURL.replace(/\/+$/, '') + '/' +
    		relativeURL.replace(/^\/+/, '') : baseURL;
    },
    
    
    /**
     * ====================================================================================================
     * @description 判断URL是否是绝对URL。
     * @param {string} url 要判断的URL。
     * @return {boolean} true：是绝对URL；false：不是绝对URL。
     * ====================================================================================================
     */
    isAbsoluteURL(url) {
    	// 如果URL以“<scheme>：//”或“//”（协议相对URL）开头，则认为它是绝对的。
    	// RFC 3986将方案名称定义为以字母开头的字符序列，然后是字母，数字，加号，句点或连字符的任意组合。
    	return /^([a-z][a-z\d\+\-\.]*:)?\/\//i.test(url);
    },
    
    
    /**
     * ====================================================================================================
     * @description 深度合并对象。只支持合并两个对象。
     * @param {object} FirstOBJ 要合并的第一个对象。
     * @param {object} SecondOBJ 要合并的第二个对象。
     * @return {Object} 返回合并后的结果。
     * ====================================================================================================
     */
    deepMergeObject(FirstOBJ, SecondOBJ) {
    	for (var key in SecondOBJ) {
    		FirstOBJ[key] = FirstOBJ[key] && FirstOBJ[key].toString() === "[object Object]" ? this.deepMergeObject(
    			FirstOBJ[key], SecondOBJ[key]) : FirstOBJ[key] = SecondOBJ[key];
    	};
    	return FirstOBJ;
    },
    
  };


	

	

